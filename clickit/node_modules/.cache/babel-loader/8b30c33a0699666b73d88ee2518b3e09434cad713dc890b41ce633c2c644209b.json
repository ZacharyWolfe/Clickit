{"ast":null,"code":"import{auth}from'../config/firebase';const API_URL=\"http://localhost:5000/clickit/us-central1/api\";export const requestWithDispatch=async _ref=>{let{dispatch,endpoint,method='GET',types,data,headers={'Content-Type':'application/json'}}=_ref;const[request,success,failure]=types;try{console.log(\"starting request: \".concat(endpoint));dispatch({type:request});const response=await fetch(\"\".concat(API_URL,\"/\").concat(endpoint),{method,headers,...(method!='GET'&&data?{body:JSON.stringify(data)}:{})});if(response.ok){console.log(\"request success\");dispatch({type:success,payload:await response.json()});return;}const errorData=await response.json();console.log(\"request failure: \".concat(errorData.error));dispatch({type:failure,payload:{message:errorData.error,status:response.status}});}catch(err){console.log(\"request failure: \".concat(err));dispatch({type:failure,payload:{message:err,status:500}});}return;};export const authRequestWithDispatch=async _ref2=>{var _auth$currentUser;let{dispatch,endpoint,method='GET',types,data,headers={'Content-Type':'application/json'}}=_ref2;const userToken=await((_auth$currentUser=auth.currentUser)===null||_auth$currentUser===void 0?void 0:_auth$currentUser.getIdToken());const combinedHeaders={...headers,Authorization:\"Bearer \".concat(userToken)};return requestWithDispatch({dispatch,endpoint,method,types,data,headers:combinedHeaders});};","map":{"version":3,"names":["auth","API_URL","requestWithDispatch","_ref","dispatch","endpoint","method","types","data","headers","request","success","failure","console","log","concat","type","response","fetch","body","JSON","stringify","ok","payload","json","errorData","error","message","status","err","authRequestWithDispatch","_ref2","_auth$currentUser","userToken","currentUser","getIdToken","combinedHeaders","Authorization"],"sources":["/Users/zacharywolfe/Desktop/Clickit/clickit/src/actions/api.ts"],"sourcesContent":["import { auth } from '../config/firebase'\nimport { AppDispatch } from '../store'\n\nconst API_URL = \"http://localhost:5000/clickit/us-central1/api\"\n\ntype RequestWithDispatchParams = {\n    dispatch: AppDispatch\n    endpoint: string\n    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n    types: [requestType: string, successType: string, errorType: string]\n    data?: Record<string, any>\n    headers?: Record<string, string>\n}\n\nexport const requestWithDispatch = async ({\n    dispatch,\n    endpoint,\n    method = 'GET',\n    types,\n    data,\n    headers = { 'Content-Type': 'application/json' },\n}: RequestWithDispatchParams) => {\n    const [request, success, failure] = types\n\n    try {\n        console.log(`starting request: ${endpoint}`)\n        dispatch({ type: request })\n        const response = await fetch(`${API_URL}/${endpoint}`, {\n            method,\n            headers,\n            ...(method != 'GET' && data ? { body: JSON.stringify(data) } : {}),\n        })\n\n        if (response.ok) {\n            console.log(`request success`)\n            dispatch({ type: success, payload: await response.json() })\n            return\n        }\n\n        const errorData = await response.json()\n        console.log(`request failure: ${errorData.error}`)\n        dispatch({\n            type: failure,\n            payload: { message: errorData.error, status: response.status },\n        })\n    } catch (err: any) {\n        console.log(`request failure: ${err}`)\n        dispatch({\n            type: failure,\n            payload: { message: err, status: 500 },\n        })\n    }\n\n    return\n}\n\nexport const authRequestWithDispatch = async ({\n    dispatch,\n    endpoint,\n    method = 'GET',\n    types,\n    data,\n    headers = { 'Content-Type': 'application/json' },\n}: RequestWithDispatchParams) => {\n    const userToken = await auth.currentUser?.getIdToken()\n\n    const combinedHeaders = { ...headers, Authorization: `Bearer ${userToken}` }\n    return requestWithDispatch({\n        dispatch,\n        endpoint,\n        method,\n        types,\n        data,\n        headers: combinedHeaders,\n    })\n}\n"],"mappings":"AAAA,OAASA,IAAI,KAAQ,oBAAoB,CAGzC,KAAM,CAAAC,OAAO,CAAG,+CAA+C,CAW/D,MAAO,MAAM,CAAAC,mBAAmB,CAAG,MAAAC,IAAA,EAOF,IAPS,CACtCC,QAAQ,CACRC,QAAQ,CACRC,MAAM,CAAG,KAAK,CACdC,KAAK,CACLC,IAAI,CACJC,OAAO,CAAG,CAAE,cAAc,CAAE,kBAAmB,CACxB,CAAC,CAAAN,IAAA,CACxB,KAAM,CAACO,OAAO,CAAEC,OAAO,CAAEC,OAAO,CAAC,CAAGL,KAAK,CAEzC,GAAI,CACAM,OAAO,CAACC,GAAG,sBAAAC,MAAA,CAAsBV,QAAQ,CAAE,CAAC,CAC5CD,QAAQ,CAAC,CAAEY,IAAI,CAAEN,OAAQ,CAAC,CAAC,CAC3B,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAH,MAAA,CAAId,OAAO,MAAAc,MAAA,CAAIV,QAAQ,EAAI,CACnDC,MAAM,CACNG,OAAO,CACP,IAAIH,MAAM,EAAI,KAAK,EAAIE,IAAI,CAAG,CAAEW,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACb,IAAI,CAAE,CAAC,CAAG,CAAC,CAAC,CACrE,CAAC,CAAC,CAEF,GAAIS,QAAQ,CAACK,EAAE,CAAE,CACbT,OAAO,CAACC,GAAG,kBAAkB,CAAC,CAC9BV,QAAQ,CAAC,CAAEY,IAAI,CAAEL,OAAO,CAAEY,OAAO,CAAE,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAE,CAAC,CAAC,CAC3D,OACJ,CAEA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAR,QAAQ,CAACO,IAAI,CAAC,CAAC,CACvCX,OAAO,CAACC,GAAG,qBAAAC,MAAA,CAAqBU,SAAS,CAACC,KAAK,CAAE,CAAC,CAClDtB,QAAQ,CAAC,CACLY,IAAI,CAAEJ,OAAO,CACbW,OAAO,CAAE,CAAEI,OAAO,CAAEF,SAAS,CAACC,KAAK,CAAEE,MAAM,CAAEX,QAAQ,CAACW,MAAO,CACjE,CAAC,CAAC,CACN,CAAE,MAAOC,GAAQ,CAAE,CACfhB,OAAO,CAACC,GAAG,qBAAAC,MAAA,CAAqBc,GAAG,CAAE,CAAC,CACtCzB,QAAQ,CAAC,CACLY,IAAI,CAAEJ,OAAO,CACbW,OAAO,CAAE,CAAEI,OAAO,CAAEE,GAAG,CAAED,MAAM,CAAE,GAAI,CACzC,CAAC,CAAC,CACN,CAEA,OACJ,CAAC,CAED,MAAO,MAAM,CAAAE,uBAAuB,CAAG,MAAAC,KAAA,EAON,KAAAC,iBAAA,IAPa,CAC1C5B,QAAQ,CACRC,QAAQ,CACRC,MAAM,CAAG,KAAK,CACdC,KAAK,CACLC,IAAI,CACJC,OAAO,CAAG,CAAE,cAAc,CAAE,kBAAmB,CACxB,CAAC,CAAAsB,KAAA,CACxB,KAAM,CAAAE,SAAS,CAAG,OAAAD,iBAAA,CAAMhC,IAAI,CAACkC,WAAW,UAAAF,iBAAA,iBAAhBA,iBAAA,CAAkBG,UAAU,CAAC,CAAC,EAEtD,KAAM,CAAAC,eAAe,CAAG,CAAE,GAAG3B,OAAO,CAAE4B,aAAa,WAAAtB,MAAA,CAAYkB,SAAS,CAAG,CAAC,CAC5E,MAAO,CAAA/B,mBAAmB,CAAC,CACvBE,QAAQ,CACRC,QAAQ,CACRC,MAAM,CACNC,KAAK,CACLC,IAAI,CACJC,OAAO,CAAE2B,eACb,CAAC,CAAC,CACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}