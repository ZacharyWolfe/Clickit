{"ast":null,"code":"import { auth } from '../config/firebase';\nconst API_URL = \"http://localhost:5000/clickit/us-central1/api\";\nexport const requestWithDispatch = async ({\n  dispatch,\n  endpoint,\n  method = 'GET',\n  types,\n  data,\n  headers = {\n    'Content-Type': 'application/json'\n  }\n}) => {\n  const [request, success, failure] = types;\n  try {\n    console.log(`starting request: ${endpoint}`);\n    dispatch({\n      type: request\n    });\n    const response = await fetch(`${API_URL}/${endpoint}`, {\n      method,\n      headers,\n      ...(method != 'GET' && data ? {\n        body: JSON.stringify(data)\n      } : {})\n    });\n    if (response.ok) {\n      console.log(`request success`);\n      dispatch({\n        type: success,\n        payload: await response.json()\n      });\n      return;\n    }\n    const errorData = await response.json();\n    console.log(`request failure: ${errorData.error}`);\n    dispatch({\n      type: failure,\n      payload: {\n        message: errorData.error,\n        status: response.status\n      }\n    });\n  } catch (err) {\n    console.log(`request failure: ${err}`);\n    dispatch({\n      type: failure,\n      payload: {\n        message: err,\n        status: 500\n      }\n    });\n  }\n  return;\n};\nexport const authRequestWithDispatch = async ({\n  dispatch,\n  endpoint,\n  method = 'GET',\n  types,\n  data,\n  headers = {\n    'Content-Type': 'application/json'\n  }\n}) => {\n  var _auth$currentUser;\n  const userToken = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n  const combinedHeaders = {\n    ...headers,\n    Authorization: `Bearer ${userToken}`\n  };\n  return requestWithDispatch({\n    dispatch,\n    endpoint,\n    method,\n    types,\n    data,\n    headers: combinedHeaders\n  });\n};","map":{"version":3,"names":["auth","API_URL","requestWithDispatch","dispatch","endpoint","method","types","data","headers","request","success","failure","console","log","type","response","fetch","body","JSON","stringify","ok","payload","json","errorData","error","message","status","err","authRequestWithDispatch","_auth$currentUser","userToken","currentUser","getIdToken","combinedHeaders","Authorization"],"sources":["/Users/zacharywolfe/Desktop/Clickit/clickit/src/actions/api.ts"],"sourcesContent":["import { auth } from '../config/firebase'\nimport { AppDispatch } from '../store'\n\nconst API_URL = \"http://localhost:5000/clickit/us-central1/api\"\n\ntype RequestWithDispatchParams = {\n    dispatch: AppDispatch\n    endpoint: string\n    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n    types: [requestType: string, successType: string, errorType: string]\n    data?: Record<string, any>\n    headers?: Record<string, string>\n}\n\nexport const requestWithDispatch = async ({\n    dispatch,\n    endpoint,\n    method = 'GET',\n    types,\n    data,\n    headers = { 'Content-Type': 'application/json' },\n}: RequestWithDispatchParams) => {\n    const [request, success, failure] = types\n\n    try {\n        console.log(`starting request: ${endpoint}`)\n        dispatch({ type: request })\n        const response = await fetch(`${API_URL}/${endpoint}`, {\n            method,\n            headers,\n            ...(method != 'GET' && data ? { body: JSON.stringify(data) } : {}),\n        })\n\n        if (response.ok) {\n            console.log(`request success`)\n            dispatch({ type: success, payload: await response.json() })\n            return\n        }\n\n        const errorData = await response.json()\n        console.log(`request failure: ${errorData.error}`)\n        dispatch({\n            type: failure,\n            payload: { message: errorData.error, status: response.status },\n        })\n    } catch (err: any) {\n        console.log(`request failure: ${err}`)\n        dispatch({\n            type: failure,\n            payload: { message: err, status: 500 },\n        })\n    }\n\n    return\n}\n\nexport const authRequestWithDispatch = async ({\n    dispatch,\n    endpoint,\n    method = 'GET',\n    types,\n    data,\n    headers = { 'Content-Type': 'application/json' },\n}: RequestWithDispatchParams) => {\n    const userToken = await auth.currentUser?.getIdToken()\n\n    const combinedHeaders = { ...headers, Authorization: `Bearer ${userToken}` }\n    return requestWithDispatch({\n        dispatch,\n        endpoint,\n        method,\n        types,\n        data,\n        headers: combinedHeaders,\n    })\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,oBAAoB;AAGzC,MAAMC,OAAO,GAAG,+CAA+C;AAW/D,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAO;EACtCC,QAAQ;EACRC,QAAQ;EACRC,MAAM,GAAG,KAAK;EACdC,KAAK;EACLC,IAAI;EACJC,OAAO,GAAG;IAAE,cAAc,EAAE;EAAmB;AACxB,CAAC,KAAK;EAC7B,MAAM,CAACC,OAAO,EAAEC,OAAO,EAAEC,OAAO,CAAC,GAAGL,KAAK;EAEzC,IAAI;IACAM,OAAO,CAACC,GAAG,CAAE,qBAAoBT,QAAS,EAAC,CAAC;IAC5CD,QAAQ,CAAC;MAAEW,IAAI,EAAEL;IAAQ,CAAC,CAAC;IAC3B,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEf,OAAQ,IAAGG,QAAS,EAAC,EAAE;MACnDC,MAAM;MACNG,OAAO;MACP,IAAIH,MAAM,IAAI,KAAK,IAAIE,IAAI,GAAG;QAAEU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI;MAAE,CAAC,GAAG,CAAC,CAAC;IACrE,CAAC,CAAC;IAEF,IAAIQ,QAAQ,CAACK,EAAE,EAAE;MACbR,OAAO,CAACC,GAAG,CAAE,iBAAgB,CAAC;MAC9BV,QAAQ,CAAC;QAAEW,IAAI,EAAEJ,OAAO;QAAEW,OAAO,EAAE,MAAMN,QAAQ,CAACO,IAAI,CAAC;MAAE,CAAC,CAAC;MAC3D;IACJ;IAEA,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACO,IAAI,CAAC,CAAC;IACvCV,OAAO,CAACC,GAAG,CAAE,oBAAmBU,SAAS,CAACC,KAAM,EAAC,CAAC;IAClDrB,QAAQ,CAAC;MACLW,IAAI,EAAEH,OAAO;MACbU,OAAO,EAAE;QAAEI,OAAO,EAAEF,SAAS,CAACC,KAAK;QAAEE,MAAM,EAAEX,QAAQ,CAACW;MAAO;IACjE,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,GAAQ,EAAE;IACff,OAAO,CAACC,GAAG,CAAE,oBAAmBc,GAAI,EAAC,CAAC;IACtCxB,QAAQ,CAAC;MACLW,IAAI,EAAEH,OAAO;MACbU,OAAO,EAAE;QAAEI,OAAO,EAAEE,GAAG;QAAED,MAAM,EAAE;MAAI;IACzC,CAAC,CAAC;EACN;EAEA;AACJ,CAAC;AAED,OAAO,MAAME,uBAAuB,GAAG,MAAAA,CAAO;EAC1CzB,QAAQ;EACRC,QAAQ;EACRC,MAAM,GAAG,KAAK;EACdC,KAAK;EACLC,IAAI;EACJC,OAAO,GAAG;IAAE,cAAc,EAAE;EAAmB;AACxB,CAAC,KAAK;EAAA,IAAAqB,iBAAA;EAC7B,MAAMC,SAAS,GAAG,QAAAD,iBAAA,GAAM7B,IAAI,CAAC+B,WAAW,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,UAAU,CAAC,CAAC;EAEtD,MAAMC,eAAe,GAAG;IAAE,GAAGzB,OAAO;IAAE0B,aAAa,EAAG,UAASJ,SAAU;EAAE,CAAC;EAC5E,OAAO5B,mBAAmB,CAAC;IACvBC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,KAAK;IACLC,IAAI;IACJC,OAAO,EAAEyB;EACb,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}